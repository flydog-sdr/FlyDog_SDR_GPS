#!/bin/sh
### BEGIN INIT INFO
# Provides: kiwid
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Required-Start:
# Required-Stop:
# Short-Description: run kiwi daemon
# Description: run kiwi daemon
### END INIT INFO

# Copyright (c) 2014-2022 John Seamons, ZL/KF6VO

DEV=kiwi
KIWID=kiwid
KIWID_EXEC=/usr/local/bin/$KIWID
KIWI_MAKEFILE=/root/Beagle_SDR_GPS/Makefile

if test \( -f ${KIWI_MAKEFILE} \) ; then
    VERSION_MAJ=$(awk 'NR==1 {print $0}' ${KIWI_MAKEFILE} | cut -d ' ' -f 3)
    VERSION_MIN=$(awk 'NR==2 {print $0}' ${KIWI_MAKEFILE} | cut -d ' ' -f 3)
    KIWID_ARGS="-bg -v ${VERSION_MAJ}.${VERSION_MIN}"
else
    KIWID_ARGS="-bg"
fi

[ -x $KIWID_EXEC ] || exit 1

BBAI_64=$(cat /proc/device-tree/model | grep -q -s "BeagleBone AI-64" && echo true)
BBAI=$(cat /proc/device-tree/model | sed "s/\(.*\)./\1x/" | grep -q -s "BeagleBone AIx" && echo true)
RPI=$(cat /proc/device-tree/model | grep -q -s "Raspberry Pi 3" && echo true)

if [ "x${BBAI_64}" = "xtrue" ] ; then
    SBC="BBAI-64"
	USE_SPIDEV=1
    USE_SPI="USE_SPIDEV"
elif [ "x${BBAI}" = "xtrue" ] ; then
    SBC="BBAI"
	USE_SPIDEV=1
    USE_SPI="USE_SPIDEV"
elif [ "x${RPI}" = "xtrue" ] ; then
    SBC="RPI"
	USE_SPIDEV=1
    USE_SPI="USE_SPIDEV"
else
    # BBG/BBB
    # Debian 7, PIO: load our cape-bone-S overlay via echo > slots
    # Debian 7, SPIDEV: BB-SPIDEV0 loaded via echo > slots
    # Debian 8, PIO: load our cape-bone-S overlay via echo > slots
    # Debian 8, SPIDEV: Bug: BB-SPIDEV0 must be loaded via /boot/uEnv.txt to config pmux properly
    # Debian 10+, SPIDEV: Kiwi device tree loaded via UBOOT_OVERLAY, config-pin to setup spi pins

    SBC="BBG/BBB"
    SLOTS7_FN=$(ls /sys/devices/bone_capemgr.*/slots 2>/dev/null)
    SLOTS8_FN="/sys/devices/platform/bone_capemgr/slots"

    if [ "x${SLOTS7_FN}" != "x" ] ; then
        # do not use USE_SPIDEV on Debian 7
        USE_SPIDEV=0
        LOAD_SPIDEV=yes
        LOAD_SPIPIO=yes
        SLOTS_FN=${SLOTS7_FN}
        UBOOT_OVERLAY=false
    elif test \( -f ${SLOTS8_FN} \) ; then
        USE_SPIDEV=1
        LOAD_SPIDEV=no
        LOAD_SPIPIO=no
        SLOTS_FN=${SLOTS8_FN}
        UBOOT_OVERLAY=false
    else
        USE_SPIDEV=1
        LOAD_SPIDEV=no
        LOAD_SPIPIO=no
        SLOTS_FN=
        UBOOT_OVERLAY=true
    fi

    DEVID=cape-bone-${DEV}

    if [ "x${USE_SPIDEV}" = "x1" ] ; then
        # use SPIDEV driver (with built-in DMA) for SPI:
        USE_SPI="USE_SPIDEV"
        DEV_SPI=SPIDEV0
        DEVID_SPI=BB-${DEV_SPI}
        LOAD_SPI=${LOAD_SPIDEV}
    else
        USE_SPI="USE_SPIPIO"
        DEV_SPI=${DEV}-S
        DEVID_SPI=cape-bone-${DEV_SPI}
        LOAD_SPI=${LOAD_SPIPIO}
    fi

    DEV_PRU=${DEV}-P
    DEVID_PRU=cape-bone-${DEV_PRU}

    CAPE=${DEVID}-00A0
    SPI=${DEVID_SPI}-00A0
    PRU=${DEVID_PRU}-00A0
fi

DEBIAN=$(cat /etc/debian_version)
echo ${SBC} "Debian ${DEBIAN}" ${USE_SPI}

case "$1" in

  start)
    echo "Starting kiwid"

    # cape
    if [ "x${BBAI_64}" = "xtrue" ] ; then
        echo "BBAI-64 uses custom Kiwi device tree loaded via U-boot"
        sleep 1
    elif [ "x${BBAI}" = "xtrue" ] ; then
        echo "BBAI uses custom Kiwi device tree loaded via U-boot"
        sleep 1
    elif [ "x${RPI}" = "xtrue" ] ; then
        modprobe i2c-dev
        modprobe at24
        echo "24c32 0x54" > /sys/class/i2c-adapter/i2c-1/new_device
        sleep 1
    else
        if test \( ! -f /lib/firmware/${CAPE}.dtbo \) -o \( /lib/firmware/${CAPE}.dts -nt /lib/firmware/${CAPE}.dtbo \) ; then
            echo compile ${DEV} device tree;
            dtc -O dtb -o /lib/firmware/${CAPE}.dtbo -b 0 -@ /lib/firmware/${CAPE}.dts;
            # don't unload old slot because this is known to cause panics; must reboot
        fi
    
        if [ "x${UBOOT_OVERLAY}" = "xtrue" ] ; then
            echo "Kiwi device tree loaded via U-boot overlay"
            echo "SPI setup via config-pin"
        
            # easier to do this way than via U-boot
            config-pin p9.17 spi_cs
            config-pin p9.18 spi
            config-pin p9.21 spi
            config-pin p9.22 spi_sclk
        else
            echo "Kiwi and SPI device tree loaded via capemgr"

            if ! grep -q ${DEVID} ${SLOTS_FN} ; then
                echo load ${DEV} device tree;
                echo ${DEVID} > ${SLOTS_FN};
                sleep 2;
            fi

            # SPI
            if test \( -f /lib/firmware/${SPI}.dts \) -a \( \( ! -f /lib/firmware/${SPI}.dtbo \) -o \( /lib/firmware/${SPI}.dts -nt /lib/firmware/${SPI}.dtbo \) \) ; then
                echo compile ${DEV_SPI} device tree;
                dtc -O dtb -o /lib/firmware/${SPI}.dtbo -b 0 -@ /lib/firmware/${SPI}.dts;
                # don't unload old slot because this is known to cause panics; must reboot
            fi
    
            if [ "x${LOAD_SPI}" = "xyes" ] ; then
                if ! grep -q ${DEVID_SPI} ${SLOTS_FN} ; then
                    echo load ${DEV_SPI} device tree;
                    echo ${DEVID_SPI} > ${SLOTS_FN};
                    sleep 2;
                fi
            fi

            # PRU (future)
            if test \( ! -f /lib/firmware/${PRU}.dtbo \) -o \( /lib/firmware/${PRU}.dts -nt /lib/firmware/${PRU}.dtbo \) ; then
                echo compile ${DEV_PRU} device tree;
                dtc -O dtb -o /lib/firmware/${PRU}.dtbo -b 0 -@ /lib/firmware/${PRU}.dts;
                # don't unload old slot because this is known to cause panics; must reboot
            fi
        
            if ! grep -q ${DEVID_PRU} ${SLOTS_FN} ; then
                echo load ${DEV_PRU} device tree;
                echo ${DEVID_PRU} > ${SLOTS_FN};
            fi
        fi
    fi

	echo -n "Start kiwid: "
	start-stop-daemon --start --background --exec $KIWID_EXEC -- "-use_spidev" ${USE_SPIDEV} $KIWID_ARGS
	RETVAL=$?
	if [ $RETVAL -eq 0 ] ; then
		echo "OK"
	else
		echo "FAIL"
	fi

    # have to do something here that returns zero status, otherwise systemd immediately stops us. Why?
    date
    ;;

  stop)
	echo -n "Stopping kiwid: "
	start-stop-daemon --stop --name $KIWID
	RETVAL=$?
	if [ $RETVAL -eq 0 ] ; then
		echo "OK"
	else
		echo "FAIL"
	fi
    ;;

  status)
    if [ -n "`/bin/pidof $KIWID`" ] ; then
        echo "kiwid is running."
    else
        echo "kiwid is not running."
    fi
    ;;

  restart)
    $0 stop && sleep 1 && $0 start
    ;;

  *)
    echo "Usage: /etc/init.d/kiwid {start|stop|status|restart}"
    exit 1

esac

exit 0
